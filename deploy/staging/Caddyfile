staging.aquaticbarriers.org {
  log {
    level ERROR
  }

  # common headers
  header Strict-Transport-Security "max-age=63072000; preload"
  header X-Frame-Options "DENY"
  header Content-Security-Policy "default-src 'self' *.googletagmanager.com *.mapbox.com *.sentry.io; connect-src *; img-src 'unsafe-inline' * data: blob:; media-src 'unsafe-inline' *; worker-src * blob:; style-src 'unsafe-inline' *; script-src 'unsafe-inline' 'unsafe-eval' *"
  header X-Content-Type-Options nosniff

  # Set CORS
  header Access-Control-Allow-Origin "https://staging.aquaticbarriers.org"
  header Access-Control-Request-Method *
  header Access-Control-Request-Headers *

  route /services* {
      header Cache-Control "public, max-age=3600, must-revalidate"
      reverse_proxy localhost:8000
  }

  route /api/v1* {
    uri strip_prefix /api/v1
    @encode_paths {
      path */query/* */rank/* */public/* */docs/* */details/*
    }

    encode @encode_paths zstd gzip {
      # enable gzip of octet-stream (disabled by default)
      match {
          header Content-Type text/csv
          header Content-Type application/octet-stream
      }
    }

    reverse_proxy localhost:5000
  }

  route /* {
    # redirect teams page
    redir /teams /regions/southeast 301

    # most files can be cached indefinitely, they are rebuilt with new names each time
    @cached_files {
      path *.jpg *.jpeg *.png *.gif *.webp *.svg *.css *.js */static/*
      not path /favicon*
    }
    header @cached_files Cache-Control "public, max-age=31536000, immutable"

    # make sure favicons are not cached too long
    @short_cached_files {
      path /favicon*
    }
    header @short_cached_files Cache-Control "public, max-age=3600"


    # page-data, html, and site root must be fetched each time
    @no_cache {
      path *.html *.webmanifest */page-data/* / /priority /summary /network_methods /habitat_methods /metrics/* /regions/* /states/* /report/*
    }
    header @no_cache Cache-Control "public, max-age:0, must-revalidate"

    encode zstd gzip

    # Capture client only routes and route through correct page to force loading on client side
    rewrite /report/dams/* "report/dams/[sarpid]/index.html"
    rewrite /report/combined_barriers/* "report/combined_barriers/[sarpid]/index.html"
    rewrite /report/largefish_barriers/* "report/largefish_barriers/[sarpid]/index.html"
    rewrite /report/smallfish_barriers/* "report/smallfish_barriers/[sarpid]/index.html"

    root * /var/www
    file_server
  }

  # Redirect all errors to 404.html
  handle_errors {
      @404 {
          expression {http.error.status_code} == 404
      }
      rewrite @404 /404.html
      file_server
  }
}